!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?module.exports=o(require("fs")):"function"==typeof define&&define.amd?define(["fs"],o):e.UtilityLogger=o(e.fs)}(this,function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;class o{constructor(){this._fgBlack="[30m",this._fgRed="[31m",this._fgGreen="[32m",this._fgYellow="[33m",this._fgBlue="[34m",this._fgMagenta="[35m",this._fgCyan="[36m",this._fgWhite="[37m",this._bgBlack="[40m",this._bgRed="[41m",this._bgGreen="[42m",this._bgYellow="[43m",this._bgBlue="[44m",this._bgMagenta="[45m",this._bgCyan="[46m",this._bgWhite="[47m",this._bright="[1m",this._dim="[2m",this._underscore="[4m",this._blink="[5m",this._reverse="[7m",this._hidden="[8m",this._reset="[0m"}default(e){return[e]}red(e){return"undefined"!=typeof window?[`%c ${e}`,"color: red"]:[this._fgRed+e]}cyan(e){return"undefined"!=typeof window?[`%c ${e}`,"color: cyan"]:[this._fgCyan+e]}green(e){return"undefined"!=typeof window?[`%c ${e}`,"color: green"]:[this._fgGreen+e]}darkgreen(e){return"undefined"!=typeof window?[`%c ${e}`,"color: darkgreen"]:[this._fgGreen+e]}white(e){return"undefined"!=typeof window?[`%c ${e}`,"color: white"]:[this._fgWhite+e]}magenta(e){return"undefined"!=typeof window?[`%c ${e}`,"color: magenta"]:[this._fgMagenta+e]}black(e){return"undefined"!=typeof window?[`%c ${e}`,"color: black"]:[this._fgBlack+e]}}const r=new o,t=Object.freeze({quiet:0,log:1,error:2,info:3,debug:4}),i=Object.freeze({console:0,file:1,overlay:2}),s=Object.freeze({[t.log]:"default",[t.error]:"red",[t.info]:"green",[t.debug]:"magenta"}),n=Object.freeze({[t.log]:"default",[t.error]:"red",[t.info]:"darkgreen",[t.debug]:"black"}),l=Object.freeze({level:"error",mode:"console",logFile:"logFile.log"}),a=Object.freeze({level:"error",mode:"console"});class d{constructor({level:e}){if(Object.keys(t).indexOf(e)<0)throw new TypeError(`Invalid log level ${e}`);this.colors=s,this.level=t[e]}log(...e){console.log.apply(null,this._consoleFormat(e,t.log))}error(...e){console.error.apply(null,this._consoleFormat(e,t.error))}info(...e){console.info.apply(null,this._consoleFormat(e,t.info))}debug(...e){console.warn.apply(null,this._consoleFormat(e,t.debug))}_consoleFormat(e,o){const i=Date(),s=this.colors[o],n=`${i}\n${e.reduce(this._stringify,"")}`;switch(o){case t.error:return r[s](`ERROR: ${n}`);case t.info:return r[s](`INFO: ${n}`);case t.debug:return r[s](`DEBUG: ${n}`);case t.log:return r[s](`LOG: ${n}`);default:return[n]}}_stringify(e,o){return`${e}\t${o}\n\n`}}class c extends d{constructor(e){const o=Object.assign({},l,e);if(void 0!==o.mode&&Object.keys(i).indexOf(o.mode)<0)throw new TypeError(`Invalid log mode for NodeLogger ${o.modeName}`);if(super(o),this.colors=s,this.modeName=o.mode,this.mode=i[this.modeName],this.mode===i.file){if(!o.logFile)throw new TypeError("Invalid logFile undefined");this.logFile=o.logFile}}log(...o){if(this.level>=t.log)switch(this.mode){case i.console:super.log(...o);break;case i.file:e.appendFileSync(this.logFile,this._fileFormat(o,t.log));break;default:throw new TypeError(`Invalid log mode for NodeLogger ${this.modeName}`)}}error(...o){if(this.level>=t.error)switch(this.mode){case i.console:super.error(...o);break;case i.file:e.appendFileSync(this.logFile,this._fileFormat(o,t.error));break;default:throw new TypeError(`Invalid log mode for NodeLogger ${this.modeName}`)}}info(...o){if(this.level>=t.info)switch(this.mode){case i.console:super.info(...o);break;case i.file:e.appendFileSync(this.logFile,this._fileFormat(o,t.info));break;default:throw new TypeError(`Invalid log mode for NodeLogger ${this.modeName}`)}}debug(...o){if(this.level>=t.debug)switch(this.mode){case i.console:super.debug(...o);break;case i.file:e.appendFileSync(this.logFile,this._fileFormat(o,t.debug));break;default:throw new TypeError(`Invalid log mode for NodeLogger ${this.modeName}`)}}_fileFormat(e,o){const r=`${Date()}\n${e.reduce(this._stringify,"")}`;switch(o){case t.error:return`ERROR: ${r}`;case t.info:return`INFO: ${r}`;case t.debug:return`DEBUG: ${r}`;case t.log:return`LOG: ${r}`;default:return r}}}class h extends d{constructor(e){const o=Object.assign({},a,e);if(super(o),void 0!==o.mode&&Object.keys(i).indexOf(o.mode)<0)throw new TypeError(`Invalid log mode ${o.mode}`);this.colors=n,this.modeName=o.mode,this.mode=i[this.modeName],this.mode===i.overlay&&(this.overlay=document.createElement("div"),this.overlay.setAttribute("id","logger-overlay"),this.overlay.setAttribute("style","position: fixed; bottom: 0; top: 75%; right: 0; width 250px; overflow-y: scroll; background-color: rgba(0,0,0,0.45); color: white; padding: 5px 10px;"),document.getElementsByTagName("body")[0].appendChild(this.overlay))}log(...e){if(this.level>=t.log){const o=document.createElement("span");switch(this.mode){case i.console:super.log(...e);break;case i.overlay:o.innerHTML=this._overlayFormat(e,t.log),o.setAttribute("style",`color: ${COLOR[t.log]}`),this.overlay.appendChild(o);break;default:throw new TypeError(`Invalid log mode for BrowserLogger: ${this.modeName}`)}}}error(...e){if(this.level>=t.error){const o=document.createElement("span");switch(this.mode){case i.console:super.error(...e);break;case i.overlay:o.innerHTML=this._overlayFormat(e,t.error),o.setAttribute("style",`color: ${COLOR[t.error]}`),this.overlay.appendChild(o);break;default:throw new TypeError(`Invalid log mode for BrowserLogger: ${this.modeName}`)}}}info(...e){if(this.level>=t.info){const o=document.createElement("span");switch(this.mode){case i.console:super.info(...e);break;case i.overlay:o.innerHTML=this._overlayFormat(e,t.info),o.setAttribute("style",`color: ${COLOR[t.info]}`),this.overlay.appendChild(o);break;default:throw new TypeError(`Invalid log mode for BrowserLogger: ${this.modeName}`)}}}debug(...e){if(this.level>=t.debug){const o=document.createElement("span");switch(this.mode){case i.console:super.debug(...e);break;case i.overlay:o.innerHTML=this._overlayFormat(e,t.debug),o.setAttribute("style",`color: ${COLOR[t.debug]}`),this.overlay.appendChild(o);break;default:throw new TypeError(`Invalid log mode for BrowserLogger: ${this.modeName}`)}}}_overlayFormat(e,o){const r=Date();let i;switch(o){case t.error:i=`ERROR: ${r}<br/>`;break;case t.info:i=`INFO: ${r}<br/>`;break;case t.debug:i=`DEBUG: ${r}<br/>`;break;case t.log:i=`LOG: ${r}<br/>`}let s=e.reduce(this._stringify,"");return s=s.replace("\n","<br />"),s=s.replace("\t","&emsp;"),i+s}}return function(){if("undefined"!=typeof window)return h;if("undefined"!=typeof global)return c;throw new Error("Unknown environment")}()});
