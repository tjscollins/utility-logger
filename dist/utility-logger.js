!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?module.exports=o(require("fs"),require("path"),require("colors")):"function"==typeof define&&define.amd?define(["fs","path","colors"],o):e.UtilityLogger=o(e.fs,e.path,e.colors)}(this,function(e,o,r){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e,o=o&&o.hasOwnProperty("default")?o.default:o,r=r&&r.hasOwnProperty("default")?r.default:r;const t=Object.freeze({quiet:0,log:1,error:2,info:3,debug:4}),s=Object.freeze({console:0,file:1,overlay:2}),i=Object.freeze({[t.log]:"white",[t.error]:"red",[t.info]:"green",[t.debug]:"cyan"}),l=Object.freeze({level:"error",mode:"console",logFile:void 0}),n=Object.freeze({level:"error",mode:"console"});class a{constructor({level:e}){if(Object.keys(t).indexOf(e)<0)throw new TypeError(`Invalid log level ${e}`);this.level=t[e]}log(...e){console.log(this._consoleFormat(e,t.log))}error(...e){console.error(this._consoleFormat(e,t.error))}info(...e){console.info(this._consoleFormat(e,t.info))}debug(...e){console.warn(this._consoleFormat(e,t.debug))}_consoleFormat(e,o){const s=Date();let l;switch(o){case t.error:l=r[i[t.error]](`ERROR: ${s}\n${e.reduce(this._stringify,"")}`);break;case t.info:l=r[i[t.info]](`INFO: ${s}\n${e.reduce(this._stringify,"")}`);break;case t.debug:l=r[i[t.debug]](`DEBUG: ${s}\n${e.reduce(this._stringify,"")}`);break;case t.log:l=r[i[t.log]](`LOG: ${s}\n${e.reduce(this._stringify,"")}`)}return l}_stringify(e,o){return`${e}\t${o}\n\n`}}class d extends a{constructor(e){const r=Object.assign({},l,e);if(super(r),void 0!==r.mode&&Object.keys(s).indexOf(r.mode)<0)throw new TypeError(`Invalid log mode ${r.mode}`);this.mode=s[r.mode],this.mode===s.file&&(this.logFile=r.logFile||`${o.basename(process.argv[1])}.log`)}log(...o){if(this.level>=t.log)switch(this.mode){case s.console:super.log(...o);break;case s.file:e.appendFile(this.logFile,this._fileFormat(o,t.log));break;default:throw new TypeError(`Invalid log mode ${this.mode}`)}}error(...o){if(this.level>=t.error)switch(this.mode){case s.console:super.error(...o);break;case s.file:e.appendFile(this.logFile,this._fileFormat(o,t.error));break;default:throw new TypeError(`Invalid log mode ${this.mode}`)}}info(...o){if(this.level>=t.info)switch(this.mode){case s.console:super.info(...o);break;case s.file:e.appendFile(this.logFile,this._fileFormat(o,t.info));break;default:throw new TypeError(`Invalid log mode ${this.mode}`)}}debug(...o){if(this.level>=t.debug)switch(this.mode){case s.console:super.debug(...o);break;case s.file:e.appendFile(this.logFile,this._fileFormat(o,t.debug));break;default:throw new TypeError(`Invalid log mode ${this.mode}`)}}_fileFormat(e,o){const r=Date();let s;switch(o){case t.error:s=`ERROR: ${r}\n`;break;case t.info:s=`INFO: ${r}\n`;break;case t.debug:s=`DEBUG: ${r}\n`;break;case t.log:s=`LOG: ${r}\n`}return s+=e.reduce(this._stringify,"")}}class c extends a{constructor(e){const o=Object.assign({},n,e);if(super(o),void 0!==o.mode&&Object.keys(s).indexOf(o.mode)<0)throw new TypeError(`Invalid log mode ${o.mode}`);this.mode=s[o.mode],this.mode===s.overlay&&(this.overlay=document.createElement("div"),this.overlay.setAttribute("id","logger-overlay"),this.overlay.setAttribute("style","position: fixed; bottom: 0; top: 200px; right: 0; width 250px; overflow-y: scroll; background-color: rgba(0,0,0,0.35); color: white;"))}log(...e){if(this.level>=t.log){const o=document.createElement("span");switch(this.mode){case s.console:super.log(...e);break;case s.overlay:o.innerHTML=this._overlayFormat(e,t.log),o.setAttribute("style",`color: ${i[t.log]}`);break;default:throw new TypeError(`Invalid log mode for BrowserLogger: ${this.mode}`)}this.overlay.appendChild(o)}}error(...e){if(this.level>=t.error){const o=document.createElement("span");switch(this.mode){case s.console:super.error(...e);break;case s.overlay:o.innerHTML=this._overlayFormat(e,t.error),o.setAttribute("style",`color: ${i[t.error]}`);break;default:throw new TypeError(`Invalid log mode for BrowserLogger: ${this.mode}`)}this.overlay.appendChild(o)}}info(...e){if(this.level>=t.info){const o=document.createElement("span");switch(this.mode){case s.console:super.info(...e);break;case s.overlay:o.innerHTML=this._overlayFormat(e,t.info),o.setAttribute("style",`color: ${i[t.info]}`);break;default:throw new TypeError(`Invalid log mode for BrowserLogger: ${this.mode}`)}this.overlay.appendChild(o)}}debug(...e){if(this.level>=t.debug){const o=document.createElement("span");switch(this.mode){case s.console:super.debug(...e);break;case s.overlay:o.innerHTML=this._overlayFormat(e,t.debug),o.setAttribute("style",`color: ${i[t.debug]}`);break;default:throw new TypeError(`Invalid log mode for BrowserLogger: ${this.mode}`)}this.overlay.appendChild(o)}}_overlayFormat(e,o){const r=Date();let s;switch(o){case t.error:s=`ERROR: ${r}<br/>`;break;case t.info:s=`INFO: ${r}<br/>`;break;case t.debug:s=`DEBUG: ${r}<br/>`;break;case t.log:s=`LOG: ${r}<br/>`}const i=e.reduce(this._stringify,"");return i.replace("\n","<br />"),i.replace("\t","&emsp;"),s+i}}return"undefined"!=typeof process&&"node"===process.release.name?d:c});
